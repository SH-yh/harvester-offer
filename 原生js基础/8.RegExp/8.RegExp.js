//正则的作用:
//->表单验证:验证用户输入的内容是否符合我们设定的规则,例如：邮箱、电话、密码...
//->数据采集:在一堆数据中把我们需要的数据获取到

//正则构成
//每一个正则都由 元字符 和修饰符 两部分组成


//1.修饰符
//[修饰符]g、i、m
//g(global)->全局匹配
//i(ignoreCase)->忽略大小写匹配
//m(multiline)->换行匹配


//2.元字符：只要在//之间包含的字符都叫做元字符
//1)具有特殊意义的元字符
//    \d -> 匹配一个0-9的数字,相当于[0-9]
//    \D ->匹配一个除了0-9的任意字符
//    \w -> 匹配一个0-9、a-z、A-Z、_的数字或字符,相当于[0-9a-zA-Z_]
//    \s -> 匹配一个空白字符(空格、制表符...)
//    \b -> 匹配一个单词的边界
//    \t -> 匹配一个制表符
//    \n -> 匹配一个换行
//    .  -> 匹配一个除了\n以外的任意字符
//    ^  -> 以某一个元字符开头
//    $  -> 以某一个元字符结尾
//    \ -> 转义字符
//    x|y -> x或者y的一个
//    [xyz] -> x、y、z中的任意一个
//    [^xyz] -> 除了xyz中的任意一个字符
//    [a-z] -> 匹配a-z中的任意一个字符
//    [^a-z] -> 匹配除了a-z中的任意一个字符
//    () -> 正则中的分组

//2)代表出现次数的"量词元字符"
//->+ : 出现一到多次
//->* : 出现零到多次
//->? : 出现零到一次
//->{n} : 出现n次
//->{n,} : 出现n到多次
//->{n,m} : 出现n-m次

//3)代表本身意思的普通元字符
//->z
//var reg = /zhufeng\d?peixun/;

//2、
//-> ^/$
//    var reg = /\d+/;//->包含一到多个数字(0-9)即可
//    console.log(reg.test("zhufeng2016"));//->true
//    reg = /^\d+$/;//->只能是一到多个数字
//    console.log(reg.test("zhufeng2016"));//->false
//    console.log(reg.test("2016"));//->true
//-> .
//    var reg = /^2.6$/;
//    console.log(reg.test("2.6"));//->true
//    console.log(reg.test("2@6"));//->true
//
//    reg = /^2\.6$/;//->\是转义字符:把.这个特殊意义(任意字符)的元字符转变为只代表本身意义(小数点)的一个普通元字符
//    console.log(reg.test("2.6"));//->true
//    console.log(reg.test("2@6"));//->false
//->[]
//->在中括号中出现的所有字符(不管之前代表什么意思),在这里都是只代表本身的意思
//var reg = /^[2.3]$/;//->.这里只代表小数点,不是任意字符了
//reg = /^[\dz]$/;//->\d本身整体就是0-9之间的数字,在这里还是这个意思
//->在中括号中出现的两位数不是一个两位数，而是左边或者右边的
//var reg = /^[10-23]$/;//->1或者0-2或者3
//->在中括号中"-"具有连字符的作用,如果只想表示-,需要把其放在末尾
//var reg = /^[12-]$/;
//->中括号本身也有特殊的意思,如果需要只代表中括号本身的意思,需要进行转义
//var reg = /^\[\d+\]$/;//->"[200]"
//->x|y
//var reg = /^1|2$/;//->和这个有区别:/^[12]$/,这个表示1和2中的任意一个
//->1、2、12
//var reg = /^10|28$/;
//->10、28、1028、102、108、128、028 ->不是我们想要的那个10或者28了


//->()分组:把一个大正则划分成几个小正则
//1)改变正则的默认优先级
//var reg = /^(10|28)$/;//->10或者28
//2)分组的第二个作用：分组引用
//"wood" "foot" "week" "feel" "door" "food" "good" "cool"...
//var reg = /^[a-z]([a-z])\1[a-z]$/i;//->\1出现和第一个分组一模一样的内容
//3)分组捕获
//4）写了分组但是不想捕获的时候捕获到,我们在分组的前面加"?:"->只匹配不捕获


//->5、创建一个正则也有两种方式：字面量方式、实例创建的方式
//->实例创建第一参数值是字符串
//->想要和字面量方式保持统一的话,对于\d \w \n...这些都需要多加一个\,使其\d具有自己的特殊的意义
//    var reg = /^\d+$/ig;
//    console.log(reg.test("2016"));//->true
//    reg = new RegExp("^\d+$", "ig");
//    console.log(reg.test("2016"));//->false
//    reg = new RegExp("^\\d+$", "ig");
//    console.log(reg.test("2016"));//->true
//->对于[]、()这类的是没有区别的
//    var reg = /^[0-9]$/;
//    console.log(reg.test("0"));//->true
//    reg = new RegExp("^[0-9]$");
//    console.log(reg.test("0"));//->true
//->在实例创建的方式中,我们只要出现\,基本上都是要写\\的
//    var reg = /^\[100\]$/;
//    console.log(reg.test("[100]"));//->true
//    reg = new RegExp("^\[100\]$");
//    console.log(reg.test("[100]"));//->false
//    reg = new RegExp("^\\[100\\]$");
//    console.log(reg.test("[100]"));//->true
//->当一个正则表达式中需要把一个变量的值作为一个动态的规则:我们只能使用实例创建的方式
//    var num = 2016;
//    var reg = /^qiaoshi"+num+"haha$/;//->在//之间包起来的都是元字符,有的是特殊的,有的就是代表本身意思的 ->以q开头,iaoshi,出现一到多个",nu,出现一个到一个m,",haha  ->总之一句话:字面量方式中不存在什么字符串，也就没有所谓的字符串拼接，把变量的值拼接过来这一说了
//    console.log(reg.test("qiaoshi2016haha"));//->false
//    var num = 2016;
//    var reg = new RegExp("^qiaoshi" + num + "haha$");
//    console.log(reg.test("qiaoshi2016haha"));//->true

// 扩展
//字面量创建出来的是基本数据类型的值(不是严谨的实例,因为不能使用instanceof 检测是否是Number的实例),实例创建出来的是对象数据类型的值
//    var num = 12;
//    var num = new Number(12);


